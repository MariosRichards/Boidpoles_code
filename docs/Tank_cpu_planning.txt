ATRobots language grammar

1. Remarks - drop (;)
2. Directives? var defs?
	- why bother having declarations?
	- precompiled machine code - DITCH
Compile directives:
	#TIME : maximum timeslice (i.e. could be lower than global) - DITCH
	#MSG  : some text under name - LATER
	#CONFIG: ROBOT CONFIGURATION - DEFINITELY
	12 points
	so ... first 12 elements state where the points go?
	- downside, you can't have more than 5 in any section (just ignore if go above that?)
	
	
3. Labels? 
	(a) Indirect :(0-32767) - don't use same number twice
	(b) Direct   !labels - don't become lines ... DITCH!
4. Commands
5. Variables (up to 256, 16 bits -32768, 32767)





COMMANDS
========
Drop
= [43, 44, 46, 32]

Minimise misses by modulo-ing into range (i.e. values can be in range whatever, but forced into the range of the commands)

PORTS
=====

Minimise misses by modulo-ing into range (i.e. values can be in range whatever, but forced into the range of the commands)
Some of those could be compressed to give more I/O (e.g. spedometer/set throttle)

INTERRUPTS
==========

Ignore for the moment
<Can be implemented later>

MEMORY MAP
==========


CONSTANTS
=========



ERRORS
======







Design "compiled code" for ease of use in program
We'll be "compiling" robot code into the "compiled code" in any case


Don't worry about V/N - make different codes for each?
N -> V and N
V -> V


Only issue
-> no support for self-modifying code

@123 @124 @125
-> Would not allow this!


Choices
(1) one command per V/N combination, specifies how next operands are to be interpreted
(2) first bit of operand tells you whether it's a value or a variable (values then have to be 15bit)

Dumbest option is (1)



How to deal with variable and label use?
Don't worry


Tank_cpu

	memory[1024]
	program[???]
	ip

BORING JOBS
(1) Add all commands
(2) Add all timings to array
	
	

Things to implement entire thing

(0) DONE
   Make cpu cycles persistent (i.e. 40 cpu cycle command make you start next turn at -35 and skip until positive)

(1) DONE
Is there an easy way to handle all cpu time costs?

 it's zero
 or it's some fixed number based only on cmd
 or it's some IPO/OPO/INT declaration

 laziest option
 if cmd not in IPO/OPO/INT:
	key = cmd
 else:
	key = 100*cmd + op1
	
	
 key = cmd
 if key in timings_array:
	time += timings_array[key[
 else:
    zero_time ++
	
	if not, then 0
 elif cmd * 100 + op1 not in
 
 
(2) Do I *really* want to implement multiple versions of commands for various combinations of V/N?

-> just make a function and hand in the necessary values

-> Better yet, do the symbolic manipulation at the beginning
Then mod 63

Just double-check ordered combinations 
scale unambiguously with number of 64s



Ports

Num:  T:  I/O Name:             Function:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 0   0   I/O Scan-Arc          Sets/Returns scan-arc width.      [0 - 64]
 1   0   I/O Overburn          Sets/Returns overburn status
 2   0   I/O Transponder       Sets/Returns current transponder ID
 3   0   I/O Shutdown-Level    Sets/Returns shutdown-level.
 4   0   I/O Com Channel       Sets/Returns com channel setting
 5   0   I/O Mine Layer        Lays mine or Returns mines-remaining.
 6   0   I/O Mine Trigger      Detonates/returns previously-placed mines.
 7   0   I/O Shield            Sets/Returns shield's status (0=off, else=on)
 8   0    I/0  Spedometer     Sets/Returns current throttle setting[-75- 100]
Inputs only
===========  
  9   0    I  Heat Sensor       Returns current heat-level       [0 - 500]
  10   0    I  Compass          Returns current heading          [0 - 255]
  11   0    I  Turret Sensor     Returns current turret offset    [0 - 255]
  12   0    I  Turret Sensor     Returns absolute turret heading  [0 - 255]
  13   0    I  Damage Sensor     Returns current armor level      [0 - 100]
  14   1    I  Scanner           Returns range to nearest target in scan arc
  15   1    I  Accuracy          Returns accuracy of last scan     [-2 - 2]
  16   3    I  Radar             Returns range to nearest target
  17   0    I  Random Generator  Returns random number     [-32768 - 32767]
  18  40    I  Sonar             Returns heading to nearest target[0 - 255]
Outputs only
============
 9   0    O  Rotate Turret     Offsets turret (cumulative)
 10   0    O  Aim Turret        Sets turret offset to value      [0 - 255]
 11   0    O  Steering          Turn specified number of degrees
 12   3    O  Weapon control    Fires weapon w/ angle adjustment  [-4 - 4]



Formats
- no operands
CMD N
CMD V
CMD V N
CMD N N 
CMD V V

CMD NN + 0
CMD VN + 64
CMD NV + 128
CMD VV + 192


Commands:


0  1  NOP           NOP        Simply wastes a clock-cycle.
1  ?  DEL  DELAY    DEL N      Equivelant to N NOPS.
	65 ?  DEL  DELAY    DEL V      Equivelant to N NOPS.
2  1  NEG           NEG #N      Negates V:   V = 0-V  (aka "two's compliment") 
3  1  INC           INC #N      Increments V, (v=v+1)
4  1  DEC           DEC #N      Decrements V, (v=v-1)
5  1  NOT           NOT #N      Bitwise NOT, not(V),  result stored in V
6  1  ADD           ADD #N N    Adds      V+N, result stored in V
	134 1  ADD           ADD #N V    Adds      V+N, result stored in V
7  1  SUB           SUB #N N    Subtracts V-N, result stored in V
	135  1  SUB           SUB #N V    Subtracts V-N, result stored in V
8  1  SHL           SHL #N N    Bit-shifts  V left  N bit positions
	136  1  SHL           SHL #N V    Bit-shifts  V left  N bit positions
9  1  SHR           SHR #N N    Bit-shifts  V right N bit positions
	137  1  SHR           SHR #N V    Bit-shifts  V right N bit positions (preserves sign)
10  1  ROL           ROL #N N    Bit-rotates V left  N bit positions
	138  1  ROL           ROL #N V    Bit-rotates V left  N bit positions
11  1  ROR           ROR #N N    Bit-rotates V right N bit positions
	139  1  ROR           ROR #N V    Bit-rotates V right N bit positions
12  1  OR            OR  #N N    Bitwise OR,  V or  N, result stored in V
	140  1  OR            OR  #N V    Bitwise OR,  V or  N, result stored in V
13  1  AND           AND #N N    Bitwise AND, V and N, result stored in V
	141  1  AND           AND #N V    Bitwise AND, V and N, result stored in V
14  1  XOR           XOR #N N    Bitwise XOR, V xor N, result stored in V
	142  1  XOR           XOR #N V    Bitwise XOR, V xor N, result stored in V
15 10  MPY           MPY #N N    Mulitplies V*N, result stored in V
	143 10  MPY           MPY #N V    Mulitplies V*N, result stored in V
16 10  DIV           DIV #N N    Divides    V/N, result stored in V (integer)
	144 10  DIV           DIV #N V    Divides    V/N, result stored in V (integer)
17 10  MOD           MOD #N N    MOD's    V & N, result stored in V (modulus)
	145 10  MOD           MOD #N V    MOD's    V & N, result stored in V (modulus)
18  2  MOV  SET      MOV #N N    Sets V = N
	146  2  MOV  SET      MOV #N V    Sets V = N
// MOV 1, LOC 2, GET 2, PUT 2 -> 2
19  3  XCHG SWAP     XCHG #N #N   Exchanges the values of two variables (#N WITH #N)

20  2  TEST          TEST N N   Ands two numbers, result not stored, flags set
	84  2  TEST          TEST V N   Ands two numbers, result not stored, flags set
	148  2  TEST          TEST N V   Ands two numbers, result not stored, flags set
	212  2  TEST          TEST V V   Ands two numbers, result not stored, flags set
21  1  CMP           CMP N N    Compares two numbers, results in flags reg.
	85  1  CMP           CMP V N    Compares two numbers, results in flags reg.
	149 1  CMP           CMP N V    Compares two numbers, results in flags reg.
	213 1  CMP           CMP V V    Compares two numbers, results in flags reg.

22  1  JMP  GOTO     JMP N      Jumps program (ip) to label #N
	86  1  JMP  GOTO     JMP V      Jumps program (ip) to label #N
23  0  JLS  JB       JLS N      Jumps to label N if last compare was <
	87  0  JLS  JB       JLS V      Jumps to label N if last compare was <
24  0  JGR  JA       JGR N      Jumps to label N if last compare was >
	88  0  JGR  JA       JGR V      Jumps to label N if last compare was >
25  0  JNE           JNE N      Jumps to label N if last compare was <>
	89  0  JNE           JNE V      Jumps to label N if last compare was <>
26  0  JEQ  JE       JEQ N      Jumps to label N if last compare was =
	90  0  JEQ  JE       JEQ V      Jumps to label N if last compare was =
27  0  JAE  JGE      JAE N      Jumps to label N if last compare was >=
	91  0  JAE  JGE      JAE V      Jumps to label N if last compare was >=
28  0  JBE  JLE      JBE N      Jumps to label N if last compare was <=
	92  0  JBE  JLE      JBE V      Jumps to label N if last compare was <=
29  0  JZ            JZ  N      Jumps to label N if last compare was 0
	93  0  JZ            JZ  V      Jumps to label N if last compare was 0
30  0  JNZ           JNZ N      Jumps to label N if last compare was not 0
	94  0  JNZ           JNZ V      Jumps to label N if last compare was not 0

31  ?  INT           INT N      Executes interrupt number N
	65  ?  INT           INT #N      Executes interrupt number N
32  4+ IPO  IN       IPO N #N    Inputs number from port N, result into #N
33  4+ OPO  OUT      OPO N1 N2  Outputs N2 to port N1
	97  4+ OPO  OUT      OPO #N1 N2  Outputs N2 to port N1
	161 4+ OPO  OUT      OPO N1 #N2  Outputs N2 to port N1
	225 4+ OPO  OUT      OPO #N1 #N2  Outputs N2 to port N1
	
	
<implement cx>
18  1  DO            DO N       Sets CX = N
19  1  LOOP          LOOP N     Decrements CX, If CX>0 then Jumps to label N

<implement stack>
30  1  PUSH          PUSH N     Puts N onto the stack (sp incremented)
31  1  POP           POP  V     Removes a number from the stack, into V
10  1  RET  RETURN   RET        Returns from a subroutine (pops the ip)
11  1  CALL GSB      CALL N     Calls subroutine at label #N (pushes ip)










Num: T: Name:        Function:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  0   - Destruct     Detonate the robot (if I go down, you go down with me!)
  1  10 Reset        Resets robot program.
  2   5 Locate       Sets EX,FX registers equal to X,Y coordinates.
  3   2 Keepshift    Sets Keepshift, input:     AX 0 = off, non-0 = on
  4   1 Overburn     Sets Overburn,  input:     AX 0 = off, non-0 = on
  5   2 ID           Returns robot ID number in FX
  6   2 Timer        Returns game clock in EX:FX (32-bit number)
  7  32 Find Angle   Returns angle to point specified in EX,FX; AX=result
  8   1 Target-ID    Returns ID of last robot scanned (with any scan) in FX
  9   2 Target-Info  Returns info on last scanned target (EX=dir,FX=throttle)
 10   4 Game-Info    Returns info: DX=Total number of robots active,
                                   EX=Match number,
                                   FX=Number of matches
 11   5 Robot-info   Returns info: DX=Robot speed (in cm per game-cycle),
                                   EX=Time since last damage taken
                                   FX=Time since a fired shot hit a robot.
                                   (time measured in game-cycles)
                                   (robot speed is current as of int call)
 12   1 Collisions   Returns collision count in FX
 13   1 Reset ColCnt Resets collision count back to 0.
 14   1 Transmit     Transmits the data in AX on the current channel.
 15   1 Receive      Returns the next item in com queue in FX
 16   1 DataReady    Returns the amount of data in queue in FX (0 for none).
 17   1 ClearCom     Empties the Com Queue
 18   3 Kills/Deaths Returns info: DX=Kill Count (spans multiple rounds)
                                   EX=Kill Count (for this round only)
                                   FX=Deaths     (spans multiple rounds)
 19   1 ClearMeters  Resets the 'meters' variable to 0.


